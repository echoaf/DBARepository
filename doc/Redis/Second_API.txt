单线程架构
    每次客户端调用都经历了发送命令、执行命令、返回结果三个过程.
    I/O多路复用:https://draveness.me/redis-io-multiplexing
        非阻塞I/O,Redis使用epoll作为I/O多路复用技术的实现,再加上Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件,不在网络I/O上浪费过多的时间
    
纯内存存储、IO多路复用技术、单线程架构是造就Redis高性能的三个因素
由于Redis的单线程架构,所以需要每个命令能被快速执行完,否则会存在阻塞Redis的可能,理解Redis单线程命令处理机制是开发和运维Redis的核心之一
批量操作(例如mget、mset、hmset等)能够有效提高命令执行的效率,但要注意每次批量操作的个数和字节数
