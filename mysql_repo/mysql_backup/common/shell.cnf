#!/bin/bash

local_ip=$(/sbin/ifconfig|grep "inet "|awk '{print $2}'|grep -Ev "127.0.0.1|172.17"|head -1) # centos-7
base_dir="/data/repository/mysql_repo/mysql_backup"
common_dir="$base_dir/common"
log_dir="$base_dir/log" && mkdir -p $log_dir
tmp_dir="$base_dir/tmp" && mkdir -p $tmp_dir

mysql="$common_dir/mysql" # Ver 15.1 Distrib 5.5.60-MariaDB, for Linux (x86_64) using readline 5.1
mysqlbinlog="$common_dir/mysqlbinlog" # Ver 3.4 for Linux at x86_64
mydumper="/usr/local/bin/mydumper"
myloader="/usr/local/bin/myloader"
innobackupex="/usr/local/xtrabackup/bin/innobackupex"
ssh="/usr/bin/ssh"
chmod a+x $mysql $mysqlbinlog

normal_log="$log_dir/shell.log"

# 备份目录
backup_parent_dir="/data/MySQL_BACKUP"
full_backup_dir="$backup_parent_dir/FULL_BACKUP"
binarylog_backup_dir="$backup_parent_dir/BINARYLOG_BACKUP"
dump_dir="$backup_parent_dir/DUMP"
mkdir -p $backup_parent_dir $full_backup_dir $binarylog_backup_dir $dump_dir

max_table_rows=1000000 # 大于此数对表分块dump

dba_host="172.16.112.10"
dba_port="10000"
dba_user="dba_master" # DML权限
dba_pass="dba_master"
check_user="read_user" # 只读权限
check_pass="read_user"
admin_user="remote_root" # surper权限
admin_pass="remote_root"
repl_user="repl_user" # 复制用户
repl_pass="repl_user"
dump_user="dump_user" # 备份用户
dump_pass="dump_user"
DBA_MYSQL="$mysql -h$dba_host -P$dba_port -u$dba_user -p$dba_pass --default-character-set=utf8 -N"

t_mysql_info="mysql_info_db.t_mysql_info" # MySQL信息表
t_mysql_fullbackup_info="mysql_backup_db.t_mysql_fullbackup_info" # 全备信息表
t_mysql_fullbackup_result="mysql_backup_db.t_mysql_fullbackup_result" # 全备结果表
t_mysql_binarylog_info="mysql_backup_db.t_mysql_binarylog_info" # 增备信息表
t_mysql_binarylog_result="mysql_backup_db.t_mysql_binarylog_result" # 增备结果表
t_mysql_check_info="mysql_backup_db.t_mysql_check_info" # 校验信息表
t_mysql_check_result="mysql_backup_db.t_mysql_check_result" # 校验结果表



####################################### Functions




function analysisXtrabackupInfo()
{
    file="$1"
    data_source="$2"
    slave_host=$(echo "$data_source" | awk -F":" '{print $1}')
    slave_port=$(echo "$data_source" | awk -F":" '{print $2}')
    values=$(cat $file)
    start_time=$(echo "$values" | grep -w "start_time"| awk -F"= " '{print $2}')
    end_time=$(echo "$values" | grep -w "end_time"| awk -F"= " '{print $2}')
    slave_log_file=$(echo "$values" | grep -w "binlog_pos"| awk -F"= " '{print $2}'| awk -F"," '{print $1}'| awk '{print $2}'| sed "s/'//g")
    slave_log_pos=$(echo "$values" | grep -w "binlog_pos"| awk -F"= " '{print $2}'| awk -F"," '{print $2}'| awk '{print $2}'| sed "s/'//g")
    metadata_jason="{'start_time':'$start_time','end_time':'$end_time','slave_host':'$slave_host','slave_port':'$slave_port','slave_log_file':'$slave_log_file','slave_log_pos':'$slave_log_pos','slave_gtid':'','master_host':'','master_port':'','master_log_file':'','master_log_pos':'','master_gitd':''}"
}


function checkXtrabackupResultLocal()
{
    backup_path="$1"
    data_source="$2"
    host=$(echo "$data_source" | awk -F":" '{print $1}')
    port=$(echo "$data_source" | awk -F":" '{print $2}')
    cnt=$(ps aux| grep "$innobackupex" | grep "host=$host" | grep "port=$port"| wc -l)
    if [ -d "$backup_path" ];then
        if [ -f "$backup_path/xtrabackup_info" ];then
            analysisXtrabackupInfo "$backup_path/xtrabackup_info" "$data_source"
            echo "${start_time}--${end_time}--${metadata_jason}"
            E=0
        else
            if ((${cnt}==0));then
                return_info="backup is fail,not find $backup_path/xtrabackup_info and pid is not exists."
                echo "$return_info"
                E=2
            else
                return_info="backup is backuping,find $backup_path and not find $backup_path/xtrabackup_info however pid is exists."
                echo "$return_info"
                E=1
            fi
        fi
    else
        if ((${cnt}==0));then
            return_info="backup is fail,not find $backup_path and pid is not exists."
            echo "$return_info"
            E=2
        else
            return_info="backup is backuping,not find $backup_path however pid is exists."
            echo "$return_info"
            E=1
        fi
    fi

    return $E
}

function checkXtrabackup()
{
    src_host="$1"
    src_port="$2"
    backup_path="$3"

    mkdirPath "$backup_path"
    checkPathFile "$backup_path"
    if (($?!=0));then
       content="path is not empty.($backup_path)"
       printLog "$content" "$normal_log"
       return 1
    fi
    
    for u in $(echo "$dump_user:$dump_pass $repl_user:$repl_pass"| sed 's/ /\n/g')
    do
        user=$(echo "$u"| awk -F":" '{print $1}')
        pass=$(echo "$u"| awk -F":" '{print $2}')
        info="mysql -u$user -p$pass -h$src_host -P$src_port"
        checkMySQLConnection "$src_host" "$src_port" "$user" "$pass"
        if (($?!=0));then
            content="mysql connect error.($info)"
            printLog "$content" "$normal_log"
            return 1
        fi
    done

    #info="mysql -u$dump_user -p$dump_pass -h$src_host -P$src_port"
    #checkActiveConnect "$src_host" "$src_port" "$dump_user" "$dump_pass"
    #if (($?!=0));then
    #    printLog "mysql have active trx($info)." "$normal_log" 
    #    return 1
    #fi

    return 0
}


function getMyCNF()
{
    port="$1"
    cnf=$(ps aux| grep mysqld_safe | grep "$port" | awk -F"--defaults-file=" '{print $2}'| awk '{print $1}')
    if [ -f "$cnf" ];then
        echo "$cnf"
        E=0
    else
        E=1
    fi
    return $E
}


function checkGtidMode()
{
    host="$1"
    port="$2"
    gtid_mode=$($mysql -h$host -P$port -u$dump_user -p$dump_pass -N -e "show global variables like 'gtid_mode';" 2>&1)
    if [ "$gtid_mode" = "ON" ] ;then
        echo 1
    else
        echo 0
    fi
}


function checkSlaveWorkers()
{
    host="$1"
    port="$2"
    slave_workers=$($mysql -h$host -P$port -u$dump_user -p$dump_pass -N -e "show global variables like 'slave_parallel_workers';" 2>&1)
    if [ "$slave_workers" = "" ] || [ "$slave_workers" = "0" ];then
        echo 0
    else
        echo 1
    fi
}


function checkSlaveInfo()
{
    host="$1"
    port="$2"
    gtid_mode=$(checkGtidMode "$host" "$port")
    slave_workers=$(checkSlaveWorkers "$host" "$port")
    if [ "$gtid_mode" = "1" ] && [ "$slave_workers" = "1" ];then # 两者都打开
        echo "1"
    else
        echo "0"
    fi
}


<<comment
# 远程备份,远程备份只能压缩
# 使用免密钥方式
# 172.16.112.10:11000的mysql数据备份到172.16.112.11
#innobackupex --defaults-file=/data/mysql/11000/my.cnf --tmpdir=/data/MySQL_BACKUP/DUMP/20181206 --stream=tar --user=fql_dump --password=fql_dump --host=172.16.112.10 --port=11000 --slave-info --no-timestamp /data/MySQL_BACKUP/DUMP/20181206 | ssh -p 22 root@172.16.112.11 -o StrictHostKeyChecking=no "gzip >/data/MySQL_BACKUP/DUMP/20181206/backup.tar.gz"

# 远程备份,远程备份只能压缩
# 使用明文密码方式
# 172.16.112.10:11000的mysql数据备份到172.16.112.11
innobackupex --defaults-file=/data/mysql/11000/my.cnf --tmpdir=/data/MySQL_BACKUP/DUMP/20181206 --stream=tar --user=fql_dump --password=fql_dump --host=172.16.112.10 --port=11000 --slave-info --no-timestamp /data/MySQL_BACKUP/DUMP/20181206 | sshpass -p "redhat" ssh -p 22 root@172.16.112.11 -o StrictHostKeyChecking=no "gzip >/data/MySQL_BACKUP/DUMP/20181206/backup.tar.gz"
comment
# 一定要用root
function backupXtrabackupRemote()
{
    remote_host="$1"
    remote_ssh_port="$2"
    remote_mysql_port="$3"
    local_ssh_port="$4"
    backup_path="$5"
    is_wait="$6"
    tmpdir="/tmp/full" # 表空间太大可能会占用/tmp空间
    local_host="$local_ip"
    # 在远程目录需要执行的命令
    remote_cmd_get_cnf="ps aux| grep mysqld_safe | grep \"$remote_mysql_port\" | awk -F\"--defaults-file=\" '{print \$2}'| awk '{print \$1}'" # 获取my.cnf
    my_cnf=$(timeout 3 $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "$remote_cmd_get_cnf" 2>&1)
    my_cnf=$(echo "$my_cnf" | sed -e 's/"//g' -e 's/\n//g') # Tips:不知道为什么有这个
    if (($?!=0));then
        printLog "执行远程命令报错($remote_cmd_get_cnf)"
        return 1
    fi

    tmpdir_cmd_mkdir="mkdir -p $tmpdir"
    timeout 3 $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "$tmpdir_cmd_mkdir"
    if (($?!=0));then
        printLog "执行远程命令报错($tmpdir_cmd_mkdir)"
        return 1
    fi

    # Tips:一段极其丑陋的代码，希望不需要再进行改造
    slave_info=$(checkSlaveInfo "$remote_host" "$remote_ssh_port")
    if [ "$is_wait" = "Y" ];then
        if [ "$slave_info" = "1" ];then
            innobackup_cmd_execute="/usr/bin/innobackupex --defaults-file=$my_cnf --tmpdir=$tmpdir --stream=tar --user=$dump_user --password=$dump_pass --host=$remote_host --port=$remote_mysql_port --slave-info --no-timestamp $tmpdir | $ssh -p $local_ssh_port root@$local_host -o StrictHostKeyChecking=no \"gzip >$backup_path/backup.tar.gz\" "
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "echo '$innobackup_cmd_execute'>/tmp/innobackupex.sh" >>$normal_log 2>&1
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "sh /tmp/innobackupex.sh" >>$normal_log 2>&1
        else
            innobackup_cmd_execute="/usr/bin/innobackupex --defaults-file=$my_cnf --tmpdir=$tmpdir --stream=tar --user=$dump_user --password=$dump_pass --host=$remote_host --port=$remote_mysql_port --no-timestamp $tmpdir | $ssh -p $local_ssh_port root@$local_host -o StrictHostKeyChecking=no \"gzip >$backup_path/backup.tar.gz\" "
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "echo '$innobackup_cmd_execute'>/tmp/innobackupex.sh" >>$normal_log 2>&1
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "sh /tmp/innobackupex.sh" >>$normal_log 2>&1
        fi
    else
        if [ "$slave_info" = "1" ];then
            innobackup_cmd_execute="/usr/bin/innobackupex --defaults-file=$my_cnf --tmpdir=$tmpdir --stream=tar --user=$dump_user --password=$dump_pass --host=$remote_host --port=$remote_mysql_port --slave-info --no-timestamp $tmpdir | $ssh -p $local_ssh_port root@$local_host -o StrictHostKeyChecking=no \"gzip >$backup_path/backup.tar.gz\" "
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "echo '$innobackup_cmd_execute'>/tmp/innobackupex.sh" >>$normal_log 2>&1
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "sh /tmp/innobackupex.sh" >>$normal_log 2>&1 &
        else
            innobackup_cmd_execute="/usr/bin/innobackupex --defaults-file=$my_cnf --tmpdir=$tmpdir --stream=tar --user=$dump_user --password=$dump_pass --host=$remote_host --port=$remote_mysql_port --no-timestamp $tmpdir | $ssh -p $local_ssh_port root@$local_host -o StrictHostKeyChecking=no \"gzip >$backup_path/backup.tar.gz\" "
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "echo '$innobackup_cmd_execute'>/tmp/innobackupex.sh" >>$normal_log 2>&1
            $ssh -p $remote_ssh_port -o StrictHostKeyChecking=no root@$remote_host "sh /tmp/innobackupex.sh" >>$normal_log 2>&1 &
        fi
    fi
    if (($?==0));then
        return 0
    else
        return 1
    fi
}



function backupXtrabackupLocal()
{
    host="$1"
    port="$2"
    backup_path="$3"
    is_wait="$4"
    
    my_cnf=$(getMyCNF "$port")
    if (($?!=0));then
        printLog "找不到my.cnf($port)" "$normal_log"
        return 1
    fi

    # --slave-info 
    # The --slave-info option requires GTID enabled for a multi-threaded slave.
    # 因为从库开了多线程复制(slave_parallel_workers)但没开启GTID,而XtraBackup要求2者必须都开启,否则报错
    slave_info=$(checkSlaveInfo "$host" "$port")
    if [ "$is_wait" = "Y" ];then
        if [ "$slave_info" = "1" ];then
            $innobackupex --defaults-file=$my_cnf --user=$dump_user --password=$dump_pass --host=$host --port=$port --slave-info --no-timestamp $backup_path >>$normal_log 2>&1
        else
            $innobackupex --defaults-file=$my_cnf --user=$dump_user --password=$dump_pass --host=$host --port=$port --no-timestamp $backup_path >>$normal_log 2>&1
        fi
    else
        if [ "$slave_info" = "1" ];then
            $innobackupex --defaults-file=$my_cnf --user=$dump_user --password=$dump_pass --host=$host --port=$port --slave-info --no-timestamp $backup_path >>$normal_log 2>&1 &
        else
            $innobackupex --defaults-file=$my_cnf --user=$dump_user --password=$dump_pass --host=$host --port=$port --no-timestamp $backup_path >>$normal_log 2>&1 &
        fi
    fi

    if (($?==0));then
        return 0
    else
        return 1
    fi
}


function archivePath()
{
    dir_path="$1"
    base_path="$2"
    # Tips:
    # --remove-files:归档后删除源数据
    # 归档大文件会比较吃CPU
    cd $dir_path && tar zcf ${base_path}.tar.gz $base_path --remove-files
}


function analysisMetadata()
{
    metadata="$1"
    data_source="$2"
    slave_host=$(echo "$data_source"| awk -F":" '{print $1}')
    slave_port=$(echo "$data_source"| awk -F":" '{print $2}')
    repl_conn="$mysql -u$repl_user -p$repl_pass -h$slave_host -P$slave_port"

    values=$(cat "$metadata")
    start_time=$(echo "$values" | grep -w "Started dump at:"| awk -F"Started dump at: " '{print $2}')
    end_time=$(echo "$values" | grep -w "Finished dump at:"| awk -F"Finished dump at: " '{print $2}')
    slave_log_file=$(echo "$values"| grep -w "SHOW MASTER STATUS:" -A 3 | grep -w "Log:"| awk -F"Log:" '{print $2}' | sed 's/ //g')
    slave_log_pos=$(echo "$values"| grep -w "SHOW MASTER STATUS:" -A 3 | grep -w "Pos:"| awk -F"Pos:" '{print $2}' | sed 's/ //g')
    slave_gtid=$(echo "$values"| grep -w "SHOW MASTER STATUS:" -A 3 | grep -w "GTID:"| awk -F"GTID:" '{print $2}' | sed 's/ //g')
    master_host=$(echo "$values"| grep -w "SHOW SLAVE STATUS:" -A 4 | grep -w "Host:"| awk -F"Host:" '{print $2}' | sed 's/ //g')
    master_port=$(echo "show slave status\G" | $repl_conn | grep -w "Master_Port:"| awk -F"Master_Port:" '{print $2}'| sed 's/ //g')
    master_log_file=$(echo "$values"| grep -w "SHOW SLAVE STATUS:" -A 4 | grep -w "Log:"| awk -F"Log:" '{print $2}' | sed 's/ //g')
    master_log_pos=$(echo "$values"| grep -w "SHOW SLAVE STATUS:" -A 4 | grep -w "Pos:"| awk -F"Pos:" '{print $2}' | sed 's/ //g')
    master_gtid=$(echo "$values"| grep -w "SHOW SLAVE STATUS:" -A 4 | grep -w "GTID:"| awk -F"GTID:" '{print $2}' | sed 's/ //g')
    metadata_jason="{'start_time':'$start_time','end_time':'$end_time','slave_host':'$slave_host','slave_port':'$slave_port','slave_log_file':'$slave_log_file','slave_log_pos':'$slave_log_pos','slave_gtid':'$slave_gtid','master_host':'$master_host','master_port':'$master_port','master_log_file':'$master_log_file','master_log_pos':'$master_log_pos','master_gitd':'$master_gtid'}"
}


function checkMydumperResult()
{
    f_metadata="$1"
    data_source="$2"
    if [ -f "$f_metadata" ];then
        analysisMetadata "$f_metadata" "$data_source"
        echo "${start_time}--${end_time}--${metadata_jason}"
        E=0
    else
        if ps -ef | grep -v grep | grep "$mydumper" | grep -q "$backup_path";then
            printLog "[$data_source]pid is exits,not find metadata" "$normal_log"
            E=1
        else
            printLog "[$data_source]pid is not exits,not find metadata" "$normal_log"
            E=2
        fi
    fi
    return "$E"
}


function mkdirPath()
{
    path="$1"
    if [ ! -d "$path" ];then
        mkdir -p $path
    fi
}


function checkPathFile()
{
    path="$1"
    cnt=$(ls "$path"| wc -l)
    if ((${cnt}==0));then
        E="0"
    else
        E="1"
    fi
    return "$E"
}


function checkMySQLConnection()
{
    mysql_host="$1"
    mysql_port="$2"
    mysql_user="$3"
    mysql_pass="$4"
    value=$($mysql -h$mysql_host -P$mysql_port -u$mysql_user -p$mysql_pass -e "select 'k'" -N 2>&1)
    if [ "$value" == "k" ];then
        return 0
    else
        return 1
    fi
}


function checkActiveConnect()
{
    mysql_host="$1"
    mysql_port="$2"
    mysql_user="$3"
    mysql_pass="$4"
    sql="select count(*) from information_schema.innodb_trx;"
    value=$($mysql -h$mysql_host -P$mysql_port -u$mysql_user -p$mysql_pass -e "$sql" -N 2>&1)
    if (($?!=0));then
        return 1
    fi
    if ((${value}>0));then
        return 1
    fi
}


function checkMydumper()
{
    src_host="$1"
    src_port="$2"
    backup_path="$3"

    mkdirPath "$backup_path"
    checkPathFile "$backup_path"
    if (($?!=0));then
       content="path is not empty.($backup_path)"
       printLog "$content" "$normal_log"
       return 1
    fi
    
    for u in $(echo "$dump_user:$dump_pass $repl_user:$repl_pass"| sed 's/ /\n/g')
    do
        user=$(echo "$u"| awk -F":" '{print $1}')
        pass=$(echo "$u"| awk -F":" '{print $2}')
        info="mysql -u$user -p$pass -h$src_host -P$src_port"
        checkMySQLConnection "$src_host" "$src_port" "$user" "$pass"
        if (($?!=0));then
            content="mysql connect error.($info)"
            printLog "$content" "$normal_log"
            return 1
        fi
    done

    info="mysql -u$dump_user -p$dump_pass -h$src_host -P$src_port"
    checkActiveConnect "$src_host" "$src_port" "$dump_user" "$dump_pass"
    if (($?!=0));then
        printLog "mysql have active trx($info)." "$normal_log" 
        return 1
    fi

    return 0
}



function backupMydump()
{
    src_host="$1"
    src_port="$2"
    backup_path="$3"
    is_wait="$4" # 是否等待

    if [ "$is_wait" = "Y" ];then
        $mydumper --regex '^(?!(performance_schema|sys))' -u $dump_user -p $dump_pass -h $src_host -P $src_port -v 2 -t 4 -s $max_table_rows -r $max_table_rows -o $backup_path -L $normal_log >>$normal_log 2>&1
    else
        $mydumper --regex '^(?!(performance_schema|sys))' -u $dump_user -p $dump_pass -h $src_host -P $src_port -v 2 -t 4 -s $max_table_rows -r $max_table_rows -o $backup_path -L $normal_log >>$normal_log 2>&1 &
    fi

    if (($?==0));then
        return 0
    else
        return 1
    fi
}


function upperString()
{
    string="$1"
    echo "$string"| tr 'a-z' 'A-Z'
}


function printLog()
{
    content="$1"
    normal_log="$2"
    if [ -z "$normal_log" ];then
        normal_log="$log_dir/shell.log"
    fi
    echo "[$(date +"%F %T")]$content"
    echo "[$(date +"%F %T")]$content" >>$normal_log 2>&1
}


function lockFile()
{
    shell_name="$1"
    sock_file="$2"
    pid="$3"

    # 检测是否还存在除了$pid的其他进程,如果存在需要kill
    is_pids=$(ps aux| grep -w "$shell_name"| grep -v grep | grep -v "$pid"| awk '{print $2}')

    # 判断是否存在sock_file
    if [ ! -f "$sock_file" ];then
        if [ "$is_pids" ];then
            for is_pid in $(echo "$is_pids")
            do
                # kill前再次判断是否存在当前pid,避免异常
                if ps aux| grep $is_pid| grep -w "$shell_name"| grep -v grep >/dev/null 2>&1; then
                    echo "[$(date +"%F %T")]$(basename $shell_name) is killed."
                    kill $is_pid
                fi
            done
        fi
        echo "[$(date +"%F %T")]$(basename $shell_name) start pull." 
        echo "$pid" >$sock_file

    else
        value=$(cat $sock_file 2>&1)
        is_num=$(ps aux | grep $value | grep $shell_name | wc -l)
        # 唯一一种正常情况
        if ((${is_num}==1));then
            echo "[$(date +"%F %T")]$(basename $shell_name) is running." 
            exit 0
        else
            if [ "$is_pids" ];then
                for is_pid in $(echo "$is_pids")
                do
                    if ps aux| grep $is_pid| grep -w $shell_name |grep -v grep >/dev/null 2>&1; then
                        echo "[$(date +"%F %T")]$(basename $shell_name) is killed."
                        kill $is_pid
                    fi
                done
            fi
            echo "[$(date +"%F %T")]$(basename $shell_name) is not ok($(basename $sock_file) error), restarting." 
            echo "$pid" >$sock_file
        fi
    fi
}


function lastExit()
{
    bd="$1"
    maxr_second="$2"
    shell_name="$3"
    if [ -z "$bd" ];then
        bd="0"
    fi
    if [ -z "$maxr_second" ];then
        maxr_second="1"
    fi
    ed=$(date +%s)
    vd=$(echo "$ed -$bd" | bc)
    if ((${vd}>=${maxr_second}));then #执行超过时间推出
        printLog "[$shell_name][bd:$bd,ed:$ed,maxr_second:$maxr_second]shell is normal exit." "$normal_log"
        exit
    fi
}


