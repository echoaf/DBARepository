#!/bin/bash

# SHELL配置文件

base_dir="/data/repository/monitor"
common_dir="$base_dir/common"
local_cnf="$common_dir/local.cnf" # 本地配置文件

######################## 变量 ##############################
local_ip=$(/sbin/ifconfig|grep "inet "|awk '{print $2}'|grep -Ev "127.0.0.1|172.17"|head -1) # centos-7
base_dir="/data/repository/monitor"
common_dir="$base_dir/common"
log_dir="$base_dir/log" && mkdir -p $log_dir
tmp_dir="$base_dir/tmp" && mkdir -p $tmp_dir
mysql="$common_dir/mysql" # Ver 15.1 Distrib 5.5.60-MariaDB, for Linux (x86_64) using readline 5.1
normal_log="$log_dir/shell.log"

######################## MySQL连接方式 ##############################
dba_host="172.16.112.10"
dba_port="10000"
dba_user="dba_master" # DML权限
dba_pass="dba_master"
read_user='read_user' # 实例读用户
read_pass='read_user'
admin_user='admin_user' # 管理员账号,远程
admin_pass='admin_user'
DBA_MYSQL="$mysql -h$dba_host -P$dba_port -u$dba_user -p$dba_pass --default-character-set=utf8 -N"


######################## MySQL TABLE ##############################
t_mysql_info="mysql_info_db.t_mysql_info" # MySQL信息表
t_mysql_slow="mysql_slow_db.t_mysql_slow"
t_mysql_tcpdump="mysql_tcpdump_db.t_mysql_tcpdump"
t_conf_common="monitor_db.t_conf_common"
# 如果需要对某个IP的所有实例添加规则,Ftype写成system,Fport默认值
# 如果只对某个IP的单个实例添加规则,Ftype写成mysql,Fport需要填写值,并且以mysql优先
t_conf_person="monitor_db.t_conf_person" 

######################## ##############################
collection_path_1_min="$base_dir/collection/1_min"
collection_path_1_sec="$base_dir/collection/1_sec"
#collection_py_1_min=("mysql_status.py" "mysql_system_info.py" "system_info.py" "mysql_slave_status.py")
collection_py_1_min=("mysql_slave_status.py")
collection_sh_system_1_sec=("top.sh" "vmstat.sh" "iotop.sh" "iostat.sh" "ps.sh" "lsof.sh" "ss.sh")
collection_sh_mysql_1_sec=("mysql_processlist.sh" "mysql_innodb_status.sh" "mysql_information.sh")

###################
max_slowlog_len="2000000" # pt工具分析慢日志最大行
catch_tcpdump_time="20" # 每次抓包时长
catch_tcpdump_size="20000" # 每次抓包大小
tcpdump_gaplock_time="60" # 间隔时间

############## log


######################## Functions ##############################

function getLocalValue()
{
    key="$1"
    value=$(cat $local_cnf | grep -w "$key" | awk -F"${key}=" '{print $2}'| sed -e 's/ /"/g' -e "s/'//g" -e "s/ //g")
    echo "$value"
}


function getKV()
{
    key="$1"
    host="$2"
    port="$3"
    key_type="$4"
    sql="select Fvalue from $t_conf_person where Fstate='online' 
        and Fkey='$key' and Ftype='$key_type' and Fserver_host='$host' and Fserver_port='$port';"
    value=(connMySQL "$sql" "$dba_port" "Y")
    if [ -z "$value" ];then
        sql="select Fvalue from $t_conf_common where Fstate='online' and Fkey='$key';"
        value=(connMySQL "$sql" "$dba_port" "Y")
        if [ -z "$value" ];then # 从本地获取配置文件
            value=$(getLocalValue "$key")
            if [ -z "$value" ];then # 退出,防止获取错误的值程序异常
                printLog "[$key]获取不到value,exit"
                exit 64
            fi
        fi
    fi
    echo "$value"
}


function getToday()
{
    echo $(date +"%Y%m%d")
}

function getCurtimestamp()
{
    echo $(date +"%Y%m%d%H%M%S")
}


# Returns:0 or 1
#   0:可以进入执行脚本状态
#   1:正在执行脚本
function lookSockFile()
{
    sock_file="$1"
    if [ ! -f "$sock_file" ];then
        E="0"
    else
        E=$(cat "$sock_file" 2>&1)
        if [ "$E" = "1" ];then
            E="1"
        else
            E="0"
        fi
    fi
    return "$E"
}

function updateSockFile()
{
    sock_file="$1"
    deal_status="$2"
    if [ "$deal_status" = "1" ];then
        deal_status="1"
    else
        deal_status="0"
    fi
    echo "$deal_status" > "$sock_file"
}


# 返回随机数据
function randNum(){
    min=$1
    max=$(($2-$min+1))
    num=$(date +%s%N)
    echo $(($num%$max+$min))
}   


function connMySQL()
{
    sql="$1"
    db_port="$2"
    is_N="$3"
    db_host="$4"
    db_user="$5"
    db_pass="$6"
    if [ -z "$db_host" ];then
        db_host="$local_ip"
        db_user="$dba_user"
        db_pass="$dba_pass"
    fi
    if [ -z "$db_user" ] || [ -z "$db_pass" ];then
        db_user="$dba_user"
        db_pass="$dba_pass"
    fi
    if [ "$is_N" = "1" ];then
        value=$($mysql -h$db_host -P$db_port -u$db_user -p$db_pass --default-character-set=utf8 -N -e "$sql" 2>&1) 
    else
        value=$($mysql -h$db_host -P$db_port -u$db_user -p$db_pass --default-character-set=utf8 -e "$sql" 2>&1)
    fi
    if (($?==0));then
        echo "$value"
    else
        echo ""
        return 64
    fi
}


function getMySQLOnlinePort()
{
    sql="select Fserver_port from $t_mysql_info where Fstate='online' and Fserver_host='$local_ip';"
    ports=$(echo "$sql" | $DBA_MYSQL)
    echo "$ports"
}


function getymdTable()
{
    table="$1"
    cur_y=$(date +"%Y") 
    cur_md=$(date +"%m%d")
    table_ymd=$(echo "$table"| sed -e "s/_db\./_${cur_y}_db\./g" -e "s/$/_${cur_md}/g")
    echo "$table_ymd"
}


function getymTable()
{
    table="$1"
    cur_y=$(date +"%Y") 
    cur_m=$(date +"%m")
    table_ym=$(echo "$table"| sed -e "s/_db\./_${cur_y}_db\./g" -e "s/$/_${cur_m}/g")
    echo "$table_ym"
}


function printLog()
{
	content="$1"
	normal_log="$2"
	color="$3"
    filename="$4"
	if [ -z "$normal_log" ];then
        normal_log="$log_dir/shell.log"
	fi
	if [ -z "$color" ];then
		color="green"
	fi		
	echo "[$(date +"%F %T")$filename] $content" >>$normal_log 2>&1
	case "$color" in
		green) echo -e "[$(date +"%F %T")] \033[32m$content \033[0m";;
		red) echo -e "[$(date +"%F %T")] \033[31m$content \033[0m";;
		normal) echo -e "[$(date +"%F %T")] $content";;
		*) echo -e "[$(date +"%F %T")] \033[32m$content \033[0m";;
	esac
}


function lockFile()
{
	shell_name="$1"
	sock_file="$2"
	pid="$3"

	# 检测是否还存在除了$pid的其他进程,如果存在需要kill
	is_pids=$(ps aux| grep -w "$shell_name"| grep -v grep | grep -v "$pid"| awk '{print $2}')

	# 判断是否存在sock_file
	if [ ! -f "$sock_file" ];then
		if [ "$is_pids" ];then
			for is_pid in $(echo "$is_pids")
			do
				# kill前再次判断是否存在当前pid,避免异常
				if ps aux| grep $is_pid| grep -w "$shell_name"| grep -v grep >/dev/null 2>&1; then
					echo "[$(date +"%F %T")]$shell_name存在异常进程,开始执行kill $is_pid"
					kill $is_pid
				fi
			done
		fi
		echo "[$(date +"%F %T")]$shell_name进程没有在运行,准备拉起" 
		echo "$pid" >$sock_file

	else
		value=$(cat $sock_file 2>&1)
		is_num=$(ps aux | grep $value | grep $shell_name | wc -l)
		# 唯一一种正常情况
		if ((${is_num}==1));then
			echo "[$(date +"%F %T")]$shell_name进程在运行" 
			exit 0
		else
			if [ "$is_pids" ];then
				for is_pid in $(echo "$is_pids")
				do
					if ps aux| grep $is_pid| grep -w $shell_name |grep -v grep >/dev/null 2>&1; then
						echo "[$(date +"%F %T")]$shell_name存在异常进程,开始执行kill $is_pid"
						kill $is_pid
					fi
				done
			fi
			echo "[$(date +"%F %T")]$shell_name进程运行异常($sock_file异常),准备重启" 
			echo "$pid" >$sock_file
		fi
	fi
}


function lastExit()
{
    bd="$1"
    maxr_second="$2"
    if [ -z "$bd" ];then
        bd="0"
    fi
    if [ -z "$maxr_second" ];then
        maxr_second="1"
    fi
    ed=$(date +%s)
    vd=$(echo "$ed -$bd" | bc)
    if ((${vd}>=${maxr_second}));then #执行超过时间推出
        exit
    fi
}

